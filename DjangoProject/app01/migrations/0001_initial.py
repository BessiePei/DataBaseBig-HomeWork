# Generated by Django 4.1.3 on 2022-11-25 04:24

import app01.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                ("activityId", models.AutoField(primary_key=True, serialize=False)),
                ("activityName", models.CharField(max_length=30, verbose_name="活动名称")),
                ("activityBrief", models.CharField(max_length=30, verbose_name="活动简介")),
                (
                    "activityContent",
                    models.FileField(
                        upload_to=app01.models.user_directory_path, verbose_name="活动详情"
                    ),
                ),
                (
                    "activityHeadPhoto",
                    models.ImageField(
                        default="default.jpg",
                        null=True,
                        upload_to=app01.models.user_directory_path,
                        verbose_name="活动头图",
                    ),
                ),
                ("activityBegin", models.DateTimeField(verbose_name="活动开始时间")),
                ("activityEnd", models.DateTimeField(verbose_name="活动结束时间")),
                (
                    "activityPersonCnt",
                    models.IntegerField(default=0, verbose_name="活动参与人数"),
                ),
            ],
            options={"db_table": "backend_activity",},
        ),
        migrations.CreateModel(
            name="Blog",
            fields=[
                ("blogId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "blogPrivate",
                    models.BooleanField(
                        choices=[(True, "是"), (False, "否")],
                        null=True,
                        verbose_name="是否公开",
                    ),
                ),
                ("blogTitle", models.CharField(max_length=45, verbose_name="帖子标题")),
                (
                    "blogContent",
                    models.FileField(
                        upload_to="blogs/contents", verbose_name="帖子内容存储路径"
                    ),
                ),
                ("blogDeliverTime", models.DateTimeField(verbose_name="帖子发布时间")),
                (
                    "blogFavoriterCnt",
                    models.IntegerField(default=0, null=True, verbose_name="帖子的收藏人数"),
                ),
                (
                    "blogLikeCnt",
                    models.IntegerField(default=0, null=True, verbose_name="帖子的喜欢人数"),
                ),
                ("blogsActivitys", models.ManyToManyField(to="app01.activity")),
            ],
            options={"db_table": "backend_blog",},
        ),
        migrations.CreateModel(
            name="Canteen",
            fields=[
                ("canteenId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "canteenName",
                    models.CharField(max_length=30, unique=True, verbose_name="食堂名称"),
                ),
                (
                    "canteenAddr",
                    models.CharField(max_length=50, unique=True, verbose_name="食堂地址"),
                ),
                (
                    "canteenPhone",
                    models.CharField(max_length=11, unique=True, verbose_name="食堂电话"),
                ),
            ],
            options={"db_table": "backend_canteen",},
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("commentId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "commentContent",
                    models.CharField(max_length=300, verbose_name="评论内容"),
                ),
                ("commentDeliverTime", models.DateTimeField(verbose_name="发布时间")),
            ],
            options={"db_table": "backend_comment",},
        ),
        migrations.CreateModel(
            name="Dish",
            fields=[
                ("dishId", models.AutoField(primary_key=True, serialize=False)),
                ("dishName", models.CharField(max_length=30, verbose_name="菜品名")),
                ("dishPrice", models.FloatField(verbose_name="菜品价格")),
                (
                    "dishPicture",
                    models.ImageField(
                        default="default.jpg",
                        max_length=25,
                        null=True,
                        upload_to=app01.models.user_directory_path,
                        verbose_name="菜品头像",
                    ),
                ),
                ("dishStars", models.FloatField(verbose_name="菜品评分")),
                (
                    "dishRaw",
                    models.CharField(
                        default="暂未提供原料信息",
                        max_length=50,
                        null=True,
                        verbose_name="菜品原料",
                    ),
                ),
                (
                    "dishTaste",
                    models.CharField(
                        default="暂未提供口味信息",
                        max_length=30,
                        null=True,
                        verbose_name="菜品口味",
                    ),
                ),
                (
                    "dishBrief",
                    models.TextField(
                        default="暂未提供菜品简介",
                        max_length=300,
                        null=True,
                        verbose_name="菜品简介",
                    ),
                ),
                ("dishFollowerCnt", models.IntegerField(verbose_name="收藏人数")),
                (
                    "dishAvailable",
                    models.BooleanField(
                        choices=[(True, "是"), (False, "否")],
                        null=True,
                        verbose_name="当日售罄",
                    ),
                ),
            ],
            options={"db_table": "backend_dish",},
        ),
        migrations.CreateModel(
            name="Merchant",
            fields=[
                ("merchantId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "merchantName",
                    models.CharField(max_length=30, unique=True, verbose_name="窗口名"),
                ),
                (
                    "merchantPassword",
                    models.CharField(max_length=25, verbose_name="窗口登录密码"),
                ),
                (
                    "merchantPortrait",
                    models.ImageField(
                        default="default.jpg",
                        max_length=25,
                        null=True,
                        upload_to=app01.models.user_directory_path,
                        verbose_name="窗口头像",
                    ),
                ),
                (
                    "merchantPhone",
                    models.CharField(max_length=11, unique=True, verbose_name="窗口电话"),
                ),
                ("merchantStars", models.FloatField(verbose_name="商家评分")),
                (
                    "merchantAddr",
                    models.CharField(max_length=50, unique=True, verbose_name="窗口地址"),
                ),
                ("merchantOpen", models.TimeField(verbose_name="窗口营业起始时间")),
                ("merchantClose", models.TimeField(verbose_name="窗口营业结束时间")),
                ("merchantFollowerCnt", models.IntegerField(verbose_name="收藏人数")),
                ("merchantActivityId", models.ManyToManyField(to="app01.activity")),
                (
                    "merchantHead",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mh",
                        to="app01.canteen",
                        verbose_name="窗口所属食堂",
                    ),
                ),
            ],
            options={"db_table": "backend_merchant",},
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("userId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "userName",
                    models.CharField(max_length=30, unique=True, verbose_name="用户名"),
                ),
                ("userPassword", models.CharField(max_length=25, verbose_name="用户密码")),
                (
                    "userEmail",
                    models.EmailField(max_length=30, unique=True, verbose_name="用户邮箱"),
                ),
                (
                    "userSignature",
                    models.CharField(
                        blank=True,
                        default="这个人很懒，什么也没留下~",
                        max_length=45,
                        verbose_name="用户个性签名",
                    ),
                ),
                (
                    "userNumber",
                    models.CharField(max_length=15, unique=True, verbose_name="用户学工号"),
                ),
                (
                    "userSex",
                    models.IntegerField(
                        choices=[(0, "女性"), (1, "男性")],
                        default=1,
                        null=True,
                        verbose_name="用户性别",
                    ),
                ),
                (
                    "userGrade",
                    models.CharField(blank=True, max_length=25, verbose_name="用户年级"),
                ),
                (
                    "userPortrait",
                    models.ImageField(
                        default="default.jpg",
                        max_length=25,
                        null=True,
                        upload_to=app01.models.user_directory_path,
                        verbose_name="用户头像",
                    ),
                ),
                (
                    "userPrefer",
                    models.CharField(
                        blank=True, default="", max_length=25, verbose_name="用户的口味偏好"
                    ),
                ),
                ("userActivityId", models.ManyToManyField(to="app01.activity")),
                ("userFavoriteDishId", models.ManyToManyField(to="app01.dish")),
                ("userFavoriteMerchantId", models.ManyToManyField(to="app01.merchant")),
            ],
            options={"db_table": "backend_user",},
        ),
        migrations.CreateModel(
            name="UserDeliverBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "blogId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ubi",
                        to="app01.blog",
                        verbose_name="帖子id",
                    ),
                ),
                (
                    "userId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ub_ui",
                        to="app01.user",
                        verbose_name="发布者id",
                    ),
                ),
            ],
            options={"db_table": "backend_UserDeliverBlog",},
        ),
        migrations.CreateModel(
            name="MerchantBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "blogId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mbi",
                        to="app01.blog",
                        verbose_name="帖子id",
                    ),
                ),
                (
                    "merchantId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mb_mi",
                        to="app01.merchant",
                        verbose_name="发布者id",
                    ),
                ),
            ],
            options={"db_table": "backend_MerchantDeliverBlog",},
        ),
        migrations.AddField(
            model_name="dish",
            name="dishSeller",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ds",
                to="app01.merchant",
                verbose_name="销售窗口",
            ),
        ),
        migrations.CreateModel(
            name="BlogPicture",
            fields=[
                ("blogPictureId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "blogPicture",
                    models.ImageField(
                        default="default.jpg",
                        max_length=25,
                        null=True,
                        upload_to="blogs/imgs",
                        verbose_name="帖子照片",
                    ),
                ),
                (
                    "blogId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bi_p",
                        to="app01.blog",
                        verbose_name="原帖id",
                    ),
                ),
            ],
            options={"db_table": "backend_blog_picture",},
        ),
        migrations.CreateModel(
            name="BlogLabel",
            fields=[
                ("blogLabelId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "blogLabelContent",
                    models.CharField(max_length=30, unique=True, verbose_name="标签名称"),
                ),
                ("blogId", models.ManyToManyField(to="app01.blog")),
            ],
            options={"db_table": "backend_blog_Label",},
        ),
        migrations.AddField(
            model_name="blog",
            name="blogsDishes",
            field=models.ManyToManyField(to="app01.dish"),
        ),
        migrations.AddField(
            model_name="blog",
            name="blogsFavoritedUserIds",
            field=models.ManyToManyField(to="app01.user"),
        ),
        migrations.CreateModel(
            name="UserDeliverOrReceivedComments",
            fields=[
                (
                    "commentId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="uc_ci",
                        serialize=False,
                        to="app01.comment",
                        verbose_name="帖子id",
                    ),
                ),
                (
                    "commentSort",
                    models.IntegerField(
                        choices=[(0, "发布"), (1, "收到")], verbose_name="评论性质"
                    ),
                ),
                (
                    "userId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uc_ui",
                        to="app01.user",
                        verbose_name="用户id",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MerchantDeliverOrReceivedComments",
            fields=[
                (
                    "commentId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="mc_ci",
                        serialize=False,
                        to="app01.comment",
                        verbose_name="帖子id",
                    ),
                ),
                (
                    "commentSort",
                    models.IntegerField(
                        choices=[(0, "发布"), (1, "收到")], verbose_name="评论性质"
                    ),
                ),
                (
                    "merchantId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mc_mi",
                        to="app01.merchant",
                        verbose_name="窗口id",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommentReplyComment",
            fields=[
                (
                    "replyCommentId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="crc_rci",
                        serialize=False,
                        to="app01.comment",
                        verbose_name="回评id",
                    ),
                ),
                (
                    "commentId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crc_ci",
                        to="app01.comment",
                        verbose_name="评论id",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BlogUnderComments",
            fields=[
                (
                    "commentId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="bc_ci",
                        serialize=False,
                        to="app01.comment",
                        verbose_name="帖子id",
                    ),
                ),
                (
                    "blogId",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bc_bi",
                        to="app01.blog",
                        verbose_name="帖子id",
                    ),
                ),
            ],
        ),
    ]
